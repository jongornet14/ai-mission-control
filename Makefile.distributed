# Distributed RL Training Makefile
# Simple Inheritance: DistributedWorker(BaseWorker)

.PHONY: dist-start
dist-start: ## Start distributed training (2 workers by default)
	@echo "🚀 Starting distributed training via CLI (Simple Inheritance)..."
	@echo "🔗 Architecture: DistributedWorker(BaseWorker)"
	python scripts/distributed_cli.py start --workers ${WORKERS:-2} --env ${ENV:-CartPole-v1}

.PHONY: dist-start-4
dist-start-4: ## Start distributed training with 4 workers
	@echo "🚀 Starting distributed training with 4 workers..."
	python scripts/distributed_cli.py start --workers 4 --env ${ENV:-CartPole-v1}

.PHONY: dist-stop
dist-stop: ## Stop distributed training
	@echo "🛑 Stopping distributed training..."
	python scripts/distributed_cli.py stop

.PHONY: dist-status
dist-status: ## Show distributed training status
	@echo "📊 Checking distributed training status..."
	python scripts/distributed_cli.py status

.PHONY: dist-logs
dist-logs: ## Show recent logs from all services
	@echo "📋 Showing distributed training logs..."
	python scripts/distributed_cli.py logs --tail 100

.PHONY: dist-follow
dist-follow: ## Follow logs in real-time
	@echo "📋 Following distributed training logs (Ctrl+C to stop)..."
	python scripts/distributed_cli.py logs --follow

.PHONY: dist-logs-coordinator
dist-logs-coordinator: ## Show coordinator logs only
	@echo "📋 Showing coordinator logs..."
	python scripts/distributed_cli.py logs --service coordinator --tail 50

.PHONY: dist-logs-worker
dist-logs-worker: ## Show specific worker logs (usage: WORKER=0 make dist-logs-worker)
ifndef WORKER
	@echo "Usage: WORKER=<worker_number> make dist-logs-worker"
	@echo "Example: WORKER=0 make dist-logs-worker"
	@exit 1
endif
	@echo "📋 Showing worker-$(WORKER) logs..."
	python scripts/distributed_cli.py logs --service worker-$(WORKER) --tail 50

.PHONY: dist-clean
dist-clean: ## Clean up all distributed training resources
	@echo "🧹 Cleaning up distributed training..."
	python scripts/distributed_cli.py cleanup

# Environment shortcuts
.PHONY: dist-cartpole
dist-cartpole: ## Start CartPole distributed training (2 workers)
	@echo "🛒 Starting CartPole distributed training..."
	ENV=CartPole-v1 WORKERS=2 $(MAKE) dist-start

.PHONY: dist-halfcheetah
dist-halfcheetah: ## Start HalfCheetah distributed training (2 workers)
	@echo "🏃 Starting HalfCheetah distributed training..."
	ENV=HalfCheetah-v4 WORKERS=2 $(MAKE) dist-start

.PHONY: dist-ant
dist-ant: ## Start Ant distributed training (2 workers)
	@echo "🐜 Starting Ant distributed training..."
	ENV=Ant-v4 WORKERS=2 $(MAKE) dist-start

.PHONY: dist-custom
dist-custom: ## Start custom environment (usage: ENV=YourEnv-v1 [WORKERS=4] make dist-custom)
ifndef ENV
	@echo "Usage: ENV=<environment> [WORKERS=<number>] make dist-custom"
	@echo "Example: ENV=Humanoid-v4 WORKERS=4 make dist-custom"
	@exit 1
endif
	@echo "🎮 Starting custom environment: $(ENV)"
	$(MAKE) dist-start

# Debugging
.PHONY: dist-debug
dist-debug: ## Show detailed debug info
	@echo "🔍 Distributed Training Debug Info"
	@echo "=================================="
	@$(MAKE) dist-status
	@echo ""
	@echo "📋 Recent Coordinator Logs:"
	@$(MAKE) dist-logs-coordinator
	@echo ""
	@echo "📋 Recent Worker-0 Logs:"
	@WORKER=0 $(MAKE) dist-logs-worker || echo "Worker-0 not available"

.PHONY: dist-monitor
dist-monitor: ## Monitor training progress (auto-refresh every 30s)
	@echo "👁️  Monitoring distributed training (Ctrl+C to stop)..."
	@while true; do \
		clear; \
		echo "=== Distributed Training Monitor - $$(date) ==="; \
		$(MAKE) dist-status; \
		echo ""; \
		echo "Next update in 30 seconds..."; \
		sleep 30; \
	done

# Help
.PHONY: dist-help
dist-help: ## Show help for distributed commands
	@echo "Distributed Training Commands (Simple Inheritance)"
	@echo "================================================="
	@echo ""
	@echo "🚀 Quick Start:"
	@echo "  make dist-start                    # Start 2 workers, CartPole-v1"
	@echo "  make dist-status                   # Check what's happening"
	@echo "  make dist-logs                     # See recent activity"
	@echo "  make dist-stop                     # Stop everything"
	@echo ""
	@echo "🎮 Environment Shortcuts:"
	@echo "  make dist-cartpole                 # CartPole-v1 with 2 workers"
	@echo "  make dist-halfcheetah              # HalfCheetah-v4 with 2 workers"
	@echo "  make dist-ant                      # Ant-v4 with 2 workers"
	@echo "  ENV=Humanoid-v4 make dist-custom   # Custom environment"
	@echo ""
	@echo "⚙️  Advanced Usage:"
	@echo "  ENV=Ant-v4 WORKERS=4 make dist-start      # 4 workers, custom env"
	@echo "  make dist-start-4                          # 4 workers, default env"
	@echo "  WORKERS=6 make dist-start                  # 6 workers"
	@echo ""
	@echo "📊 Monitoring & Debugging:"
	@echo "  make dist-follow                   # Follow logs in real-time"
	@echo "  make dist-debug                    # Show detailed debug info"
	@echo "  make dist-monitor                  # Auto-refresh status every 30s"
	@echo "  WORKER=0 make dist-logs-worker     # Specific worker logs"
	@echo ""
	@echo "🧹 Management:"
	@echo "  make dist-clean                    # Remove everything"
	@echo ""
	@echo "🏗️  Architecture:"
	@echo "  Uses simple inheritance: DistributedWorker(BaseWorker)"
	@echo "  1 Coordinator + N Workers (default: 2)"
	@echo "  File-based communication via shared Docker volume"

# Default target
.DEFAULT_GOAL := dist-help